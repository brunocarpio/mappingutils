export let grammar = {
    lex: {
        rules: [
            ["\\{", "return '{';"],
            ["\\}", "return '}';"],
            ["\\[", "return '[';"],
            ["\\]", "return ']';"],
            ["\\:", "return ':';"],
            ["\\,", "return ',';"],
            ["[ \t\r\n]+", "/* Ignore spaces, tabs, newlines */"],
            ["[-+]?(\\d+(\\.\\d*)?|\\.\\d+)", "return 'NUMBER';"],
            ["(true|false)", "return 'BOOLEAN';"],
            ["null", "return 'NULL';"],
            ['\"\\$\\..*?(\\[[^\\$]*?\\])?\"', "return 'PATH';"],
            ['\"(?!\\$\\.|,).*?\"', "return 'STRING';"],
            ["\'FUNCTION\'", "return 'FUNCTION';"],
            [".", "/* Ignore everything else */"],
        ],
    },
    start: "prg",
    bnf: {
        prg: ["{ pairs }"],
        pairs: ["pair", "pairs , pair"],
        pair: ["PATH : value"],
        value: [
            "STRING",
            "PATH",
            "NUMBER",
            "object",
            "array",
            "array_function",
            "FUNCTION",
            "BOOLEAN",
            "NULL",
        ],
        array: ["[ array_values ]"],
        array_values: ["array_value", "array_values , array_value"],
        array_value: ["STRING", "NUMBER", "BOOLEAN", "NULL", "object"],
        array_function: ["[ path_list , FUNCTION ]"],
        path_list: ["PATH", "path_list , PATH"],
        object: ["{ pairs_obj }"],
        pairs_obj: ["pair_obj", "pairs_obj , pair_obj"],
        pair_obj: ["STRING : array_value"],
    },
};
